import { useEffect, useState } from "react";

import {
  Card,
  Error,
  Heading,
  Loader,
  SearchBar,
  Subheading,
} from "../components";

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return <h2 className="text-xl font-bold uppercase text-primary">{title}</h2>;
};

let URL;

if (import.meta.env.VITE_ENV === "production") {
  URL = import.meta.env.VITE_URL;
} else {
  URL = "http://localhost:1710";
}

const Home = () => {
  const [posts, setPosts] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [searchText, setSearchText] = useState("");
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);

  useEffect(() => {
    const fetchPosts = async () => {
      setIsLoading(true);
      setError("");

      try {
        const response = await fetch(`${URL}/api/v1/post`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (!response.ok)
          throw new Error("Something went wrong with fetching posts");

        const result = await response.json();

        setPosts(result.data);
        setError("");
      } catch (err) {
        console.log(err.message);
        setError(err.message);
      } finally {
        setIsLoading(false);
      }
    };

    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = posts.filter(
          (post) =>
            post.name.toLowerCase().includes(searchText.toLowerCase()) ||
            post.prompt.toLowerCase().includes(searchText.toLowerCase()),
        );
        setSearchedResults(searchResult);
      }, 500),
    );
  };

  return (
    <>
      <Heading>The Community Showcase</Heading>
      <Subheading>
        Browse through a collection of imaginative and visually stunning images
        generated by DALL-E AI
      </Subheading>

      <SearchBar
        searchText={searchText}
        handleSearchChange={handleSearchChange}
      />

      <main className="mt-10 min-h-[50vh]">
        {isLoading ? (
          <Loader />
        ) : error ? (
          <Error message={error} />
        ) : (
          <>
            {searchText && (
              <h2 className="mb-3 text-xl font-medium text-gray-500">
                Showing Results for{" "}
                <span className="text-gray-800">{searchText}</span>:
              </h2>
            )}
            <div className="grid grid-cols-1 gap-3 xs:grid-cols-2 sm:grid-cols-3 lg:grid-cols-4">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No Search Results Found"
                />
              ) : (
                <RenderCards data={posts} title="No Posts Yet" />
              )}
            </div>
          </>
        )}
      </main>
    </>
  );
};

export default Home;
